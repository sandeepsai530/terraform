Linux:
du vs df

connect via ssh - ssh -i ~/downloads/vpn.pem ec2-user@ip-address

Topics to cover:
- why terraform? advantages
terraform commands:
terraform init - Initializes working directory(downloads required files like provider), its first cmd.
terraform plan - shows what changes terraform will make without applyig them.
terraform validate - checks whether the cnfiguration is syntactically valid. Terraform validate is included in terraform apply
terraform apply - Applies the changes to your infra. will prompt for approvals unless -auto-approve used.
terraform destroy - Tears down all resources defined in the current configuration.
terraform fmt - Formats .tf files to the canonical style.

.gitignore - files that not needed to be tracked by git can be placed under .gitignore folder

variables:
-----------
syntax:
variable "<variable-name>" {
  type = ""
  default= ""
}

number,string,bool,map,list
Number of ways variables can be defined:
    - variables.tf 
    - terraform.tfvars
    - Inline with CLI (terraform apply -var="instance_type=t2.small")
    - ENV variables (export TF_VAR_instance_type=t2.medium)
    - command prompt
    - modules
    - Locals
      Ex: locals {
            app_name = "${var.project}-${var.environment}"
          }

  prefernce of variables:
  - command line (-var="instance_type=t2.small")
  - tfvars
  - env var
  - default values
  - user prompt/command prompt

if declared as below the n variable is considered as mandatory
variable "sg_id" {
}

if declared as below the n variable is considered as optional
variable "tags" {
  default = {}
}


- conditions -> expression ? "true-value : "false-value"
  Example: instance_type = var.Environment == "prod" ? "t2.medium" : "t2.micro"

- loops -> count based, for each, dynamic blocks
- functions - max, length, split, merge, join, lower, upper, file
** learn split vs join functions
- data sources -> query existing information
  Example:
  data "aws_ami" "joindevops" {
  most_recent = true
  owners = ["973714476881"]

  filter {
    name = "name"
    values = ["RHEL-9-DevOps-Practice"]
  }
}

- output
- locals -> store expressions in a variable
  Example:
  locals {
  ami_id = data.aws_ami.joindevops.id
}
- state and remote state with locking
- provisioners -> local-exec and remote-exec
- multiple environments -> tfvars

#conditions in terraform
please refer session-27 in joindevops
variable "instance_type" {
  default = "t2.micro" 
  validation {
    condition = contains(["t3.micro", "t3.small", "t3.medium"], var.instance_type)
    error_message = "valid values for instance type are: t3.small/t3.micro/t3.medium"
  }
}

Data sources:
-------------
-> data sources are used to query existing information from the provider
-> data sources in terraform are used to get information about resources external to terraform and uses them to set up your terraform resources.

types variables that we can pass:
1. command line -> -var "<instance_type=t2.micro" or -var "<var-name>=<var-value>"
2. tfvars
3. env var
4. default values
5. user prompt

conditions:
if else, when

if(expression) {
  this statement runs if expression is true
}
else {
  this statement runs if expression is false
}

expression ? "this runs if true" : "this runs if false"
example:  instance_type = var.environment == "prod" ? "t3.small" : "t2.micro"

loops:
1. count based loops
2. for each loops
3. dynamic blocks

Count vs for-each:
count - when you need N identical resources.
for-each: when you have a collection of named or uniquely configured resources.
    When you want more control or to create resources based on a map or set of values, you use for_each.
    access each item using each.key and each.value.
    useful for creating multiple similar resources without repeating code.

interpolation: concating two variables with text

Output blocks: These are used to print the information. it will be used in module develeopment too.

locals:
-------
Locals are used to run expressions or functions and save the results to variables. refer below
session-25: 19mins
Example:
locals {
  ami_id = data.aws_ami.joindevops.id
}

LOCALS vs VARIABLES:
--------------------
locals are used to store expressions, it can even store simple key value pairs just like variables.
variables can't store expressions. variables can't refer other variable. locals can refer other locals or variables.
variables can be overriden. locals can't be overriden. 
Example for locals:
locals {
  instance_type = "t3.micro"
}

instance_type = local.instance_type

Example for variables:
variable "instance_type" {
  default = "t3.micro"
}

instance_type=var.instance_type

State Management:
-----------------
declared/desired infra -> .tf files. whatever user write in tf files, that is what user wants.
actual infra -> what terraform is creating in provider.

desired infra == actual infra

terraform.tfstate -> it is a file terraform creates to know what it is created. this is actual infra created by terraform.

someone changed the name of ec2 manually inside console.
terraform plan or apply
terraform reads state file and then compare that with actual infra using provider.

if you update tf files...
terraform.tfstate -> expense-dev-backend
compared with tf files -> expense-dev-backend-changed

if you update few parameters, resources will not be created again it will just update
but few parameters if you update, we are forced to recreate resources.

tfstate is very important file, we need to secure it.

clone terraform repo -> terraform apply
duplicate resources or errors

in collaboration environment we must maintain state file remotely.
locking is important, so that we can prevent parallel execution.

Dynamic blocks:
---------------
loops are used to create multiple resources.
dynamic blocks are used to create multiple blocks inside a resource.

Loops:
------
1-count based loops: use it to iterate lists
2-for each loop: use it to iterate maps
3-dynamic blocks:

provisioners:
-------------
provisioners are used to take some action either locally or remote when terraform created servers
Creation time:
By default, provisioners run when the resource they are defined within is created.
provisioners are only run during creation, not during update or anyother lifecycle.

destroy time:
if when = destroy is specified, the provisioner will run when the resource is defined within is destroyed
By default it takes when = creation time if nothing was mentioned
2 type of provisioners:
1-local-exec
2-remote-exec

we can use provisoners either creation time or destroy time.

local -> where terraform command is running that is local
remote -> inside the server created by terraform

when = destroy # terraform remote provisioners can be used either while creating or destroying.
# if nothing was mentioned then it will consider to eexcute the provisioner during the execution.

multiple environemnts using terraform:
--------------------------------------
1.tfvars -> used to override default values
2.workspaces
3.seperate codebase - maintain different repos for different environment.

its better to use seperate codebase as other two ways create confusion while creating the resources.

Disadvantages of tfvars/workspaces:
should be very careful, because same code to prod also, any mistake in dev causes confusion in prod.
should have full expertise, too much testing.

Advantages:
code reuse

Disadvantages with seperate codebase:
multiple repos to manage
we may be multiple employees
Code reuse can be achieved with the help of modules.

terraform modules:
variables, functions, ansible roles, locals.

modules: it is like functions, you can pass inputs you will get infra.

** In terraform modules, if you need to access variables then that has to be given in outputs.tf then it can be accessible.



DEV and PROD, remote state use

expense-dev-mysql -> mysql-dev.saisandeep-devops.xyz
expense-dev-backend -> backend-dev.saisandeep-devops.xyz
expense-dev-frontend -> frontend-dev.saisandeep-devops.xyz

expense-prod-mysql -> mysql-prod.saisandeep-devops.xyz
expense-prod-backend -> backend-prod.saisandeep-devops.xyz
expense-prod-frontend -> frontend-prod.saisandeep-devops.xyz

expense-dev or expense-prod

using TFVARS:
-------------
terraform init -reconfigure -backend-config=dev/backend.tf  --> for dev
terraform plan -var-file=dev/dev.tfvars
terraform apply -var-file=dev/dev.tfvars
terraform destroy -var-file=dev/dev.tfvars

terraform init -reconfigure -backend-config=prod/backend.tf  --> for prod
terraform plan -var-file=dev/dev.tfvars
terraform apply -var-file=prod/prod.tfvars
terraform destroy -var-file=prod/prod.tfvars

NAT Gateway:
If you want to enable egress internet to the servers in private subnet, you should create NAT gateway in
public subnet and provide route to private subnets
NAT gateway is for out going traffic

Bastion host:
when you try to connect private servers like backend and database, we need to use bastion host.
Bastion host is a secure, publicly accessible server that acts as a gateway for accessing private 
resources like EC2 instances inside a private subnet of a VPC.

Load Balancer:
ALB -> Listener -> Evaluate rules -> target group -> server

open source modules:
Advantages:
- we dont need to write code

Disadvantages:
- we are dependent on them
- whenever they update, we are forced to update

organisation module:
- we have to write complete code

Advantages:
- fully our control

DB vs RDS:
----------
DB:
- DB installation
- DB upgrades
- DB backups
- DB changes
- DB cluster setup
- DB restoration test

RDS:
- DB installation -> we just need to provide configuration
- DB upgrades - simple clicks
- DB snapshots
- DB cluster -> we can configure replication controllers, high available, storage scalable

what is null resource?
- it will not create any new resource, it is used to connect to the instances, copy the scripts, execute the scripts through provisioners. it has a trigger attribute to take actions when something is changed like instance id.